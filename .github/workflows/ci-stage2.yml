# .github/workflows/ci.yml
# CI pipeline:
# - Unit tests (fast): run on every push/PR, executes all tests except ones marked "integration".
# - Integration tests (Kafka → Parquet): run when:
#     * workflow_dispatch with input run_integration=true, OR
#     * pushes to "stage-2-feature" branch.
# Integration job starts docker compose (Kafka, etc.), sets RUN_INTEGRATION=1,
# and runs tests marked with @pytest.mark.integration.

name: CI

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]
  workflow_dispatch:
    inputs:
      run_integration:
        description: "Run integration tests (spin up Docker Compose)"
        required: false
        type: boolean
        default: false

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  unit-tests:
    name: Unit tests (no integration)
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.12"]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      - name: Install dependencies
        shell: bash
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            # Fallback: install minimal deps used by tests & pipeline
            pip install pytest fastavro kafka-python pandas pyarrow click faker
          fi

      - name: Run unit tests (exclude integration)
        env:
          PYTHONPATH: .
        run: |
          pytest -q -m "not integration" --junitxml=test-results/unit.xml

      - name: Upload unit test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-results
          path: test-results/unit.xml

  integration-tests:
    name: Integration tests (Kafka → Parquet)
    needs: unit-tests
    runs-on: ubuntu-latest
    if: >
      github.event_name == 'workflow_dispatch' && inputs.run_integration == true
      || contains(github.ref, 'stage-2-feature')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"

      - name: Install dependencies
        shell: bash
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install pytest fastavro kafka-python pandas pyarrow click faker
          fi

      - name: Show Docker & Compose versions
        run: |
          docker --version
          docker compose version

      - name: Start services (docker compose)
        run: docker compose up -d

      - name: Wait for containers to be healthy (best-effort)
        shell: bash
        run: |
          # Optional: adjust service names to match your docker-compose.yml
          # We poll for a bit to let Kafka get ready.
          for i in {1..60}; do
            if docker compose ps | grep -E "Up|running" > /dev/null; then
              break
            fi
            sleep 1
          done
          docker compose ps

      - name: Run integration tests
        env:
          PYTHONPATH: .
          RUN_INTEGRATION: "1"
          KAFKA_BOOTSTRAP: "localhost:9092"
        run: |
          pytest -q -m integration --junitxml=test-results/integration.xml

      - name: Upload integration test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results
          path: test-results/integration.xml

      - name: Upload offline parquet (debug artifact)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: offline-parquet
          path: |
            data/offline/**
          if-no-files-found: ignore

      - name: Dump Kafka logs (debug)
        if: always()
        run: |
          docker compose logs --no-color > compose-logs.txt || true

      - name: Upload compose logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: compose-logs
          path: compose-logs.txt

      - name: Stop services
        if: always()
        run: docker compose down -v
